import classes


def guidelines():
    """
    ΑΡΙΣΤΕΑ ΛΑΧΑΝΑ - 3590

    1. Στο κώδικα υλοποιήθηκαν οι κλάσεις SakClass, Player, Human, Computer, Game.


    SakClass >> Το σακουλάκι που περιέχει τα γράμματα του παιχνιδιού.

    -----
    Πεδία
    -----
    - lets: δομή δεδομένων για την αποθήκευση των γραμμάτων με το πλήθος και την αξία τους στο παιχνίδι (λεξικό
    με κλειδί το γράμμα x και τιμή λίστα [πλήθος, αξία])
    - lettersNum: πλήθος των γραμμάτων που βρίσκονται μέσα στο σακουλάκι - η τιμή της μεταβλητής ανανεώνεται
    οποιαδήποτε στιγμή κατά τη διάρκεια του παιχνιδιού


    Player >> κλάση που υλοποιεί τον παίκτη

    -----
    Πεδία
    -----
    - name: Όνομα του παίκτη
    - letters: Λίστα με τα γράμματα που διαθέτει ο παίκτης για κάποιο γύρο παιχνιδιού
    - score: Το σκορ του παίκτη στο παιχνίδι - ανανεώνεται ανάλογα με τις λέξεις που σχηματίζει ο παίκτης


    Human >> κλάση που αναπαριστά τον άνθρωπο-παίκτη και κληρονομεί από την Player

    -----
    Πεδία
    -----
    Ίδια πεδία με την Player
    Το πεδίο name αρχικοποιείται με τη τιμή που δίνει ο χρήστης ως όνομα


    Computer >> κλάση που αναπαριστά τον υπολογιστή-παίκτη και κληρονομεί από την Player

    -----
    Πεδία
    -----
    Ίδια πεδία με την Player
    Το πεδίο name αρχικοποιείται με τη τιμή Computer


    Game >> Η διαδικασία του παιχνιδιού - set ups, οι γύροι του παιχνιδιού, τέλος παιχνιδιού κτλ

    -----
    Πεδία
    -----
    - accepted_words: δομή δεδομένων με τις λέξεις που είναι αποδεκτές από το παιχνίδι
    - round: ο τρέχων γύρος του παιχνιδιού




    2. Η βασική κλάση είναι η Player. Οι παράγωγές της είναι οι Human, Computer.




    3. Επέκταση μεθόδων στην παραπάνω κληρονομικότητα χρησιμοποιήθηκε στην __init__(), με κλήση
    της super().

    Αναλυτικότερα, η __init__() της Player κάνει τις εξής αρχικοποιήσεις:

    ========================
    def __init__(self):
        self.name = ""
        self.letters = []
        self.score = 0
    ========================


    Στη παράγωγη κλάση Human, η __init__() υλοποιείται ως εξής:

    ==========================
    def __init__(self, name):
        super().__init__()
        self.name = name
    ==========================

    Δηλαδή, καλεί την __init__() της βασικής κλάσης, και επιπλέον αρχικοποιεί
    το πεδίο name με την τιμή που έχει δώσει ο χρήστης και δίνεται στην __init__()
    σαν όρισμα.


    Στη παράγωγη κλάση Computer, η __init__() υλοποιείται ως εξής:

    ===========================
    def __init__(self):
        super().__init__()
        self.name = "Computer"
    ===========================

    Δηλαδή, καλεί την __init__() της βασικής κλάσης, και επιπλέον αρχικοποιεί
    το πεδίο name με "Computer".




    4. Δεν εφαρμόστηκε υπερφόρτωση τελεστών - δεν χρησιμοποιήθηκαν decorators




    5. Η εφαρμογή οργανώνει τις αποδεκτές λέξεις της γλώσσας σε ένα λεξικό "accepted_words" (πεδίο της κλάσης Game)
    με κλειδί κάποιο γράμμα x και τιμές λίστα, όπου η λίστα συμπεριλαμβάνει τις λέξεις που ξεκινούν με το
    γράμμα - κλειδί

    Δηλαδή: Όλες οι λέξεις που ξεκινούν από Α μπαίνουν σε μία λίστα. Το λεξικό θα έχει κλειδί "Α" και τιμή τη λίστα
    με όλες τις λέξεις που ξεκινούν από "Α". (το ίδιο και για κάθε άλλο γράμμα της αλφαβήτου)




    6. Για τον παίκτη - Η/Υ, χρησιμοποίησα τον αλγόριθμο 1: min - max - smart.
    By default, τρέχει ο αλγόριθμος min, εκτός κι αν ο χρήστης αλλάξει αυτή την επιλογή στις ρυθμίσεις.
    Και για τις τρεις υλοποιήσεις, χρησιμοποιώ τη μέθοδο permutations από τη βιβλιοθήκη itertools.

    ---
    Min
    ---
    Ο αλγόριθμος δημιουργεί όλες τις δυνατές μεταθέσεις των γραμμάτων που διαθέτει ο Η/Υ ξεκινώντας από 2 και
    ανεβαίνοντας μέχρι τα 7 γράμματα.
    Ο αλγόριθμος με το που βρει τη πρώτη αποδεκτή λέξη, σταματάει και επιστρέφει τη λέξη.

    ---
    Max
    ---
    Ο αλγόριθμος δημιουργεί όλες τις δυνατές μεταθέσεις των γραμμάτων που διαθέτει ο Η/Υ ξεκινώντας από 7 και
    κατεβαίνοντας μέχρι τα 2 γράμματα.
    Ο αλγόριθμος με το που βρει την πρώτη αποδεκτή λέξη, σταματάει και επιστρέφει τη λέξη.

    -----
    Smart
    -----
    Υλοποιούνται όλες οι μεταθέσεις και η λέξη που επιλέγει ο Η/Υ είναι αυτή (ή μία από αυτές τις λέξεις)
    που έχει τη μεγαλύτερη αξία.

    """


# **************************************
# *************  main  *****************
# **************************************
print("********* SCRABBLE **********")
print("-----------------------------")
print("1: Ρυθμίσεις")
print("2: Παιχνίδι")
print("3: Πληροφορίες")
print("q: Έξοδος")
print("-----------------------------")

while True:
    choice = input("Επιλογή (1/2/3/q): ")

    # default τιμή για τον αλγόριθμο που θα χρησιμοποιηθεί, σε περίπτωση που ο χρήστης δεν επιλέξει τις ρυθμίσεις
    pc_algorithm = "min"

    if choice == "1" or choice == "2" or choice == "3" or choice == "q":
        break

if choice == "1":
    pc_algorithm = input("Επιλογή αλγορίθμου για τον Η/Υ (min, max, smart): ")

if choice == "2":
    game = classes.Game()
    game.setup()
    game.run(pc_algorithm)

if choice == "3":
    help(guidelines)

if choice == "q":
    print("Έξοδος...")
